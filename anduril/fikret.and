//------------------------------------------------------------------------------------------------
//--- CONSTANTS
//------------------------------------------------------------------------------------------------

title = "Neuroblastoma DTC RNA-seq"
shortName = "NB-DTC"
authors = "Christian Frech and Marko Laakso"

useISOpure   = false   // use deconvoluted counts for DTCs?
runMutations = false
runGSEA      = true
runHeatmap   = true
runNetwork   = true
runVenn      = true
runPGE       = true
runGO        = true
runKegg      = true

maxNA    	 = 0.90    // fraction of samples allowed to have NA values before gene is discarded
pGOEnrich    = 0.01    // minimum p-value to call a GO term enriched 


//------------------------------------------------------------------------------------------------
//--- INPUT DATA
//------------------------------------------------------------------------------------------------

inputSamples         = INPUT(path="/mnt/projects/fikret/data/sample_key.csv")
inputSampleGroups    = INPUT(path="/mnt/projects/fikret/data/sample_groups.csv")
inputComparisons     = INPUT(path="/mnt/projects/fikret/data/comparisons.csv")
gtf                  = INPUT(path="/mnt/projects/fikret/data/Homo_sapiens.GRCh37.75.etv6runx1.gtf.gz")
referenceGenomeFasta = INPUT(path="/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37/human_g1k_v37_etv6runx1.fasta") 
geneAnnot            = INPUT(path="/mnt/projects/fikret/data/ensembl.homo_sapiens_75_37.geneAnnotations.tsv")          // downloaded via Ensembl biomart http://feb2014.archive.ensembl.org/biomart/martview/b57730c5d3013cd648bcd2c966113d42
geneGO               = INPUT(path="/opt/moksiskaan/pipeline/exec/output/geneGO_9606.csv")                              // Gene Ontology annotations of all genes; comes with anduril-moksiskaan Docker image
enrichmentTable      = INPUT(path="/opt/moksiskaan/pipeline/exec/output/GOEnrichment_9606.csv")                        // Moksiskaan specific a priori probabilities for the Gene ontology terms; comes with anduril-moksiskaan Docker image
ensemblDb            = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/etc/ensemblHomoSapiens.properties")     // JDBC parameters for Ensembl~\cite{Flicek2008} database; comes with anduril-moksiskaan Docker image
genesetAnnotation    = INPUT(path="/mnt/projects/generic/data/ccri/geneset_annotation.tsv")                            // assigns gene sets to categories for filtering
latexHeaderMutation  = INPUT(path="/mnt/projects/fikret/scripts/anduril/latexHeaderMutation")
mitoGeneNames        = INPUT(path="/mnt/projects/fikret/data/mito_genes.tsv")                                          // genes encoded on mitochondrial genome
countsISOpure        = INPUT(path="/mnt/projects/fikret/results/counts.ISOpure.csv")                                   // count matrix containing deconvoluted counts for DTC samples

moksiskaanInit = MoksiskaanInit(showLog='EnsemblImport,PathwayCommonsImport,PINAImport,WikiPathways')
ensemblRef = XrefLinkRule(moksiskaan = moksiskaanInit.connection, columns = "Ensembl=Ensembl", xrefTypes  = XrefType_Ensembl_gene)

//------------------------------------------------------------------------------------------------
//--- PRELUDE
//------------------------------------------------------------------------------------------------

hyperlinkRuleEnsemblGeneCards = StringInput(content=
	"URL\trefCol\tvalueCol\n" +
	"http://www.ensembl.org/id/$ID$\tEnsembl\tEnsembl\n" +
	"http://www.genecards.org/cgi-bin/carddisp.pl?gene=$ID$\tGene\tGene\n"
)

rConfig = RConfigurationReport(packages = "base,csbl.go,DESeq2,igraph", sectionType = "section")
bibtexMoksiskaan = INPUT(path="/usr/local/share/anduril-bundles/moksiskaan/components/report-BibTeX/moksiskaan.bib")
bibtexSequencing = INPUT(path="/usr/local/share/anduril-bundles/sequencing/components/report-BibTeX/sequencing.bib")

docTemplate = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexMoksiskaan,
	bibtex3  = bibtexSequencing,
	title    = std.quote(title, type="LaTeX") + " --- Main Report",
	printTOC = true
)

@out.optOut1.filename = "Homo_sapiens.GRCh37.75.etv6runx1.norRNA.gtf.gz"
gtfNorRNA = BashEvaluate
(
	var1 = gtf,
	script = '''
		set -ex
		tmpdir=$( gettempdir )
		zcat -f @var1@ | grep -P 'gene_biotype "(rRNA|Mt_rRNA)"' | perl -ne '/(ENSG[^\"]+)/; print "$1\n"' | sort | uniq > $tmpdir/ensemblid.rrna
		zcat -f @var1@ | grep -vf $tmpdir/ensemblid.rrna | gzip -c > @optOut1@.part
		mv @optOut1@.part @optOut1@
	'''
)


//------------------------------------------------------------------------------------------------
//--- SAMPLES
//------------------------------------------------------------------------------------------------

inputSamplesNotExcluded = CSVFilter(csv=inputSamples, regexp="ExcludeEntirely=Yes|YES|y|Y", includeColumns="", negate=true)
inputSamplesNotExcludedIdLst = CSV2IDList(table1=inputSamplesNotExcluded, columnIn="Alias")

inputSamplesQC = CSVFilter(csv=inputSamplesNotExcluded, regexp="ExcludeQC=Yes|YES|y|Y", includeColumns="", negate=true)
inputSamplesQCIdLst = CSV2IDList(table1=inputSamplesQC, columnIn="Alias")

inputSamplesDGEA = CSVFilter(csv=inputSamplesNotExcluded, regexp="ExcludeDGEA=Yes|YES|y|Y", includeColumns="", negate=true)
inputSamplesDGEAIdLst = CSV2IDList(table1=inputSamplesDGEA, columnIn="Alias")

samples = record()
for entry : std.itercsv(inputSamplesNotExcluded) 
{
	samples[""+entry.ID] =
	{
		'alias' = entry.Alias,
		'file' = entry.File,
		'excludeQC' = false,
		'excludeDGEA' = false
	}

	if (entry.ExcludeQC == "Yes" || entry.ExcludeQC == "YES" || entry.ExcludeQC == "yes" || entry.ExcludeQC == "Y" || entry.ExcludeQC == "y") {
		samples[""+entry.ID]["excludeQC"] = true
	}
	if (entry.ExcludeDGEA == "Yes" || entry.ExcludeDGEA == "YES" || entry.ExcludeDGEA == "yes" || entry.ExcludeDGEA == "Y" || entry.ExcludeDGEA == "y") {
		samples[""+entry.ID]["excludeDGEA"] = true
	}
}

//------------------------------------------------------------------------------------------------
//--- SAMPLE GROUPS
//------------------------------------------------------------------------------------------------

sampleGroupsWithoutExcludedSamples = REvaluate
(
	table1 = inputSamplesDGEA,
	table2 = inputSampleGroups,
	script = StringInput(content='''
		table2$Members <- as.character(table2$Members)
		
		for (i in 1:nrow(table2)) {
		  m.old <- unlist(strsplit(table2$Members[i], ","))
		  m.new <- m.old[m.old %in% table1$Alias]
		  table2$Members[i] <- paste(m.new, collapse=",")
		}
	    table2 <- table2[table2$Members != "",]
		table.out <- table2
	''')
)
sampleGroups = sampleGroupsWithoutExcludedSamples.table

sampleGroupsQC = CSVFilter(csv=inputSampleGroups, regexp="ID=DTC|TUM|MNC")

//------------------------------------------------------------------------------------------------
//--- COMPARISONS
//------------------------------------------------------------------------------------------------

comparisons = record()
for comparison : std.itercsv(inputComparisons) 
{
	// fetch group names
	gCase    = null
	gControl = null
	for g : std.split(comparison.Members, ',')
	{
		if (gCase    == null) { gCase    = g } else
		if (gControl == null) { gControl = g } else
		std.fail("Too many groups listed for ", comparison.ID, " (", comparison.Description, "). Members = ", comparison.Members, sep='')
	}

	sampleIdLst = CSV2IDList
	(
		table1    = sampleGroups @require,
		columnIn  = "Members",
		columnOut = "Sample",
		isList    = true,
		regexp1   = "ID=(" + gCase + "|" + gControl + ")",
		@name     = "sampleIds_" + std.quote(comparison.ID, type="Anduril")
	)

	if (useISOpure) {
		comparison.design = std.strReplace(comparison.design, "TumorFraction \\+ ", "")  // already adjusted for
	}
	
	// add group record	
	comparisons[comparison.ID] = 
	{
		'caseG'       = gCase,
		'controlG'    = gControl,
		'otherG'      = comparison.NonMembers,
		'sampleIdLst' = sampleIdLst.ids,
		'sampleIds'   = std.strReplace(std.fRead(sampleIdLst.ids), "\n", ",", "^[^,]+,(.*)", "$1", ",$", ""),
		'design'      = comparison.design,
		'fcLimit'     = comparison.fcLimit,
		'pLimit'      = comparison.pLimit,
		'qLimit'      = comparison.qLimit,
		'exprLimit'   = comparison.exprLimit,
		'desc'        = comparison.Description,
		'gsea'        = comparison.GSEA
	}
}



//------------------------------------------------------------------------------------------------
//--- EXPERIMENTAL SETUP REPORT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/experimentalSetup.and"

experimentReport = experimentalSetupReport
(
	samples            = inputSamplesNotExcluded,
	sampleGroups       = sampleGroups,
	comparisons        = inputComparisons,
	sampleTableColumns = "Sample,Alias,TP,Material,PID,Rel,Dead,MNA,ATRX,2p gain,4p loss,6q loss,7q gain,11q del,17q gain",
	sampleTableFormat  = "ccccccccccccccc",
	fontsize           = "tiny"
)

//------------------------------------------------------------------------------------------------
//--- ALIGNMENT
//------------------------------------------------------------------------------------------------

alignedBams = record()
alignedBamsQC = record()
for id, sample : samples 
{
	@out.alignment.filename = sample.alias + '.gsnap.sorted.dupmarked.bam'
	gsnap = GSNAP
	(
		reads     = INPUT(path=sample.file), 
		options   = "--db=g1k_v37_etv6runx1 --dir=/data_synology/anduril/docker-images/anduril-gsnap_2014_12_28-human_g1k_v37/db/human_g1k_v37 --use-splicing=g1k_v37.splicesites --use-snps=g1k_v37.snp138 --nthreads 15 --maxsearch=100 --npaths=1 --max-mismatches=1 --novelsplicing=0 --batch=4 --genome-unk-mismatch=0",
		docker    = "biowaste:5000/anduril/gsnap",
		inputType = "auto",
		@cpu      = 10, 
		@memory   = 40000,
		@name     = "gsnap_" + sample.alias,
		@execute  = "once" 
	)

	alignedBams[sample.alias] = gsnap.alignment
	if (!sample.excludeQC) {
		alignedBamsQC[sample.alias] = gsnap.alignment
	}
}

//------------------------------------------------------------------------------------------------
//--- EXPRESSION MATRIX (one that contains all samples and one only the ones entering the QC)
//------------------------------------------------------------------------------------------------

bamCounts  = {}
for sample, bam : alignedBams
{
	@out.optOut1.filename = sample + '.htseq.counts'
	count = BashEvaluate
	(
		var1 = bam,
		var2 = gtfNorRNA.optOut1,
		script = "htseq-count -f bam -t exon -s no @var1@ @var2@ > @optOut1@.part && mv @optOut1@.part @optOut1@",
		@name = "htseq_" + sample,
		@execute  = "once" 
	)
	bamCounts[sample] = count.optOut1
}

bamCountsQC  = {}
bamCountsDGEA  = {}
for id, sample : samples 
{
	if (!sample.excludeQC) {
		bamCountsQC[sample.alias] = bamCounts[sample.alias]
	}
	if (!sample.excludeDGEA) {
		bamCountsDGEA[sample.alias] = bamCounts[sample.alias]
	}
}

htseqExprMatrix = HTSeqExprMatrix
(
	samples      = Array2CSV(array=bamCounts, @name="htseq_filelist"),
	inclusionKey = ""
)

htseqExprMatrixQC = HTSeqExprMatrix
(
	samples      = Array2CSV(array=bamCountsQC, @name="htseq_filelist_qc"),
	inclusionKey = ""
)

htseqExprMatrixDGEA = HTSeqExprMatrix
(
	samples      = Array2CSV(array=bamCountsDGEA, @name="htseq_filelist_dgea"),
	inclusionKey = ""
)

if (!useISOpure) 
{
	countMatrix     = htseqExprMatrix.countArray["all"]
	countMatrixQC   = htseqExprMatrixQC.countArray["all"]
	countMatrixDGEA = htseqExprMatrixDGEA.countArray["all"]
	
	deseqExprMatrix = DESeqExpr
	(
		geneCounts  = bamCounts,
	    counts      = false,
	    maxNA       = 0.9,
	    normalized  = true,
	    add1        = true
	)

	deseqExprMatrixQC = DESeqExpr
	(
		geneCounts  = bamCountsQC,
	    counts      = false,
	    maxNA       = 0.9,
	    normalized  = true,
	    add1        = true
	)

	deseqExprMatrixDGEA = DESeqExpr
	(
		geneCounts  = bamCountsDGEA,
	    counts      = false,
	    maxNA       = 0.9,
	    normalized  = true,
	    add1        = true
	)
} else {

	function DESeqExprFromCountMatrix
	(
		CSV geneCounts
	) -> 
	(
		CSV expr,
		CSV log2
	) 
	{
		fpm = REvaluate
		(
			table1 = geneCounts,
			script = StringInput(content='''
				library(DESeq2)
				table1 <- Matrix.read(get.input(cf, "table1"))
				sampleTable <- data.frame(sampleName = colnames(table1))
				rownames(sampleTable) <- sampleTable$sampleName
				dds <- DESeqDataSetFromMatrix(countData = table1, colData = sampleTable, design = ~1)
				table.out <- fpm(dds, robust=T)
				table.out <- table.out[apply(table.out, 1, function(x){ sum(x==0) <= length(x) * 0.9 }),]
				optOut1 <- table.out + 1
				optOut1 <- log2(optOut1)
				optOut1[apply(optOut1,2,is.nan) | apply(optOut1,2,is.na) | apply(optOut1,2,is.infinite)] <- 0
				CSV.write(get.output(cf, "optOut1"), optOut1)
				rm(optOut1)
			''')
		)
	
		return record
		(
			expr = fpm.table,
			log2 = fpm.optOut1
		)
	}
	
	countMatrix     = CSVFilter(csv=countsISOpure, includeColumns=inputSamplesNotExcludedIdLst, includeColumns="ID", colOrder=true)
	countMatrixQC   = CSVFilter(csv=countsISOpure, includeColumns=inputSamplesQCIdLst, includeColumns="ID", colOrder=true)
	countMatrixDGEA = CSVFilter(csv=countsISOpure, includeColumns=inputSamplesDGEAIdLst, includeColumns="ID", colOrder=true)

	deseqExprMatrix     = DESeqExprFromCountMatrix(geneCounts = countMatrix)
	deseqExprMatrixQC   = DESeqExprFromCountMatrix(geneCounts = countMatrixQC)
	deseqExprMatrixDGEA = DESeqExprFromCountMatrix(geneCounts = countMatrixDGEA)
}

//------------------------------------------------------------------------------------------------
//--- QUALITY CONTROL
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/qc.and"

qcReport  = getQCReport
(
	samples                = samples,
	alignedBAMs            = alignedBamsQC,
    gtf                    = gtf,
	countMatrix            = countMatrixQC,
    force expr             = deseqExprMatrixQC.log2,
    force groups           = sampleGroupsQC,
    force inputSamples     = inputSamplesQC,
    readStatsYMax          = 50,
    readStatsSamplesPerRow = 15,
    cexClusterHeatmap      = 0.3,
    cexMDS                 = 0.4,
    cexGeneBodyCoverage    = 0.25,
    boxplotCexAxis         = 0.4,
//    readStatsSamplesPerRow = 13,
//    cexClusterHeatmap      = 0.35,
//    cexMDS                 = 0.4,
//    cexGeneBodyCoverage    = 0.3,
//    boxplotCexAxis         = 0.6,
    gcBiasYMax             = 4,
    gcBiasYMin             = -3,
    sampleAnnotationColumns = "Material,TP,Inf Group,CDR,G,MNA,ATRX,2p gain,4p loss,6q loss,7q gain,11q del,17q gain",
    clusterHeatmapLegendXOffset = 0.04,
    clusterHeatmapLegendYOffset = 0.1,
    clusterHeatmapMargins   = "5,5.5"
)

//------------------------------------------------------------------------------------------------
//--- MUTATION REPORT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/mutations.and"

mutationReport = MutationReport
(
	alignedBams  = alignedBams,
	sectionTitle = "Mutated genes",
	sectionType  = "section",
	@enabled     = runMutations
)

mutationPDF = LatexPDF
(
	document = mutationReport,
	header   = latexHeaderMutation,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false,
	@enabled = runMutations
)

@out.out.filename = shortName + "-mutations.pdf"
OUTPUT(mutationPDF.document)


//------------------------------------------------------------------------------------------------
//--- DIFFERENTIAL GENE EXPRESSION ANALYSIS
//------------------------------------------------------------------------------------------------

gMoksisA = PiispanhiippaAnnotator(sourceKeys = deseqExprMatrixDGEA.expr @require,
                                  connection = moksiskaanInit.connection,
                                  inputDB    = XrefType_Ensembl_gene,
                                  organism   = Organism_Homo_sapiens,
                                  targetDB   = "BioentityName,DNARegion")

geneNames = CSVCleaner(original   = gMoksisA.bioAnnotation,
                       columns    = "sourceKey,BioentityName,DNARegion",
                       rename     = "sourceKey=Ensembl,BioentityName=Gene",
                       skipQuotes = "*",
                       trim       = true,
                       @keep      = true)


degAllLst  = record()        // unfiltered output of DESeq2 for each comparison
degCalledLst  = record()     // significant DEGs for each comparison

// compute differential expression statistics with DESeq2

for ID, comparison : comparisons
{
	deseq = DESeq2
	(
		countMatrix             = countMatrixDGEA,
		samples                 = inputSamplesDGEA,
		force sampleGroups      = sampleGroups,
	    caseGroup               = comparison.caseG,
	    controlGroup            = comparison.controlG,
	    otherGroups             = comparison.otherG,
		design                  = comparison.design,
	    colSuffix               = ID,
	    minReplicatesForReplace = 5,
	    cooksCutoff             = 0.7,
	    trim                    = 0.4,
	    @name                   = "deseq_" + std.quote(ID, type="Anduril")
	)
	degAllLst[ID] = deseq.results

	// annotate deseq output with gene names, locations, and descriptions 
	quotedSampleIds = 'G."' + std.strReplace(comparison.sampleIds, ',', '", G."') + '"'	
	deseqAnnotated = TableQuery
	(
		table1 = deseq     @require,
		table2 = geneNames @require,
		table3 = geneAnnot @require,
		query  = '''
			SELECT G."ids"                        AS "ids",
			A."Gene"                              AS "Gene",
			SUBSTR(D."Description", 1, 65)        AS "Description",
			D."Chromosome Name"                   AS "chr",
			D."Gene Start (bp)"                   AS "start",
			D."Gene End (bp)"                     AS "end",
			CONCAT(D."Chromosome Name", D."Band") AS "Band",
			G."meanExprE'''+ID+'''"               AS "meanA",
			G."meanExprC'''+ID+'''"               AS "meanB",
			G."fc'''+ID+'''"                      AS "fc",
			G."p'''+ID+'''"                       AS "p",
			G."q'''+ID+'''"                       AS "q",
			CASEWHEN(G."fc'''+ID+'''" > 0, 1, -1) AS "status",
			'''+quotedSampleIds+'''
			FROM table1 G
				LEFT OUTER JOIN table2 AS A ON (G."ids" = A."Ensembl")
				LEFT OUTER JOIN table3 AS D ON (G."ids" = D."Ensembl Gene ID")
			ORDER BY ABS("fc") DESC, "q"
		''',
		@name  = "deseqAnnotated_" + std.quote(ID, type="Anduril")
	)
		
	// subset statistically significant DEGs
	degCalled = TableQuery
	(
		table1 = deseqAnnotated @require,
		query  = 
			"""
			SELECT DISTINCT *
			FROM   table1
				WHERE  (ABS("fc") >= """ + comparison.fcLimit + """) AND
					   ("p"       <= """ + comparison.pLimit  + """) AND
					   ("q"       <= """ + comparison.qLimit  + """) AND
					   (("meanA"  >= """ + comparison.exprLimit + """) OR
					   ( "meanB"  >= """ + comparison.exprLimit + """))
					   ORDER BY ABS("fc") DESC, "q"
			""",
			@name  = "degCalled_" + std.quote(ID, type="Anduril")
	)
	degCalledLst[ID] = degCalled.table			
}

//------------------------------------------------------------------------------------------------
//--- DEG REPORTS
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/degTable.and"
include "/mnt/projects/fikret/anduril/includes/degBoxPlot.and"
include "/mnt/projects/fikret/anduril/includes/goClustering.and"
include "/mnt/projects/fikret/anduril/includes/goEnrichment.and"
include "/mnt/projects/fikret/anduril/includes/expressionHeatmap.and"

degReportLst = record()
deseqColumnTypes = StringInput(content="Table\tColumn\tType\ntable1\tfc\tDOUBLE\ntable1\tstatus\tINTEGER\n")  // required if degTable is empty (= no significant DEGs)
for ID, comparison : comparisons 
{	
	//--- VOLCANO PLOT -----------------------------------------------------------------------------------------------------//

	degVolcanoPlot = VolcanoPlot
	(
		expr = degAllLst[ID],
		geneNames = geneNames,
		labelTopN = 30,
		sigthresh = comparison.qLimit,
		lfcthresh = comparison.fcLimit,
		cexLabel = 0.4,
		sampleSize = 1000,
		caption = "Scatter plot of log2 fold-changes vs. p-values (aka 'volcano plot') comparing gene expression between " + comparison.caseG + " and " + comparison.controlG + " samples.",
		sectionTitle="Volcano plot " + std.quote(ID, type="Latex"),
		sectionType="subsubsection",
		@name = "degVolcanoPlot_" + std.quote(ID, type="Anduril")
	)

	degVolcanoPlotMito = VolcanoPlot
	(
		expr = degAllLst[ID],
		geneNames = mitoGeneNames,
		onlyGenesWithNames = true,
		labelTopN = 100,
		sigthresh = comparison.qLimit,
		lfcthresh = comparison.fcLimit,
		cexLabel = 0.4,
		sampleSize = 1000,
		caption = "Scatter plot of log2 fold-changes vs. p-values (aka 'volcano plot') of mitochondria-encoded genes comparing gene expression between " + comparison.caseG + " and " + comparison.controlG + " samples.",
		sectionTitle="Volcano plot " + std.quote(ID, type="Latex") + " (mitochondria-encoded genes)",
		sectionType="subsubsection",
		@name = "degVolcanoPlotMito_" + std.quote(ID, type="Anduril")
	)

	//--- TABLES WITH UP- AND DOWN-REULATED GENES --------------------------------------------------------------------------//

	degTableUp = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "up",
		comparison = comparison,
		ID=ID,
		design = comparison.design,
		section="Genes with higher expression in "+comparison.caseG+" than "+comparison.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableUp_" + std.quote(ID, type="Anduril")
	)

	degTableDn = getDEGTableReport
	(
		degs = degCalledLst[ID],
		degReportRefs = ensemblRef,
		direction = "down",
		comparison = comparison,
		ID=ID,
		design = comparison.design,
		section="Genes with lower expression in "+comparison.caseG+" than "+comparison.controlG+" samples",
		sectionType="subsubsection",
		@name = "degTableDn_" + std.quote(ID, type="Anduril")
	)

	//--- BOX PLOTS TOP UP- AND DOWN-REGULATED GENES ----------------------------------------------------------------------//

	degBoxplotUp = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		force exprMatrix = deseqExprMatrixDGEA.log2,
		force sampleGroups=sampleGroups,
		geneAnnot=geneAnnot,
		direction="up",
		comparison=comparison,
		labelOutliers=true,
		cexGroupLabel = 0.6,
		sectionType="subsubsection",
		@name = "degBoxplotUp_" + std.quote(ID, type="Anduril")
	)

	degBoxplotDn = getDEGBoxPlots
	(
		degs = degCalledLst[ID],
		force exprMatrix = deseqExprMatrixDGEA.log2,
		force sampleGroups=sampleGroups,
		geneAnnot=geneAnnot,
		direction="down",
		comparison=comparison,
		labelOutliers=true,
		cexGroupLabel = 0.6,
		height = 8,
		sectionType="subsubsection",
		@name = "degBoxplotDn_" + std.quote(ID, type="Anduril")
	)

	//--- EXPRESSION HEATMAP --------------------------------------------------------------------------//

	exprHeatmap = getHeatmapReport
	(
		force exprMatrix = deseqExprMatrixDGEA.log2,
		degCalled    = degCalledLst[ID],
		geneNames    = geneNames,
		force sampleGroups = sampleGroups,
		comparison   = comparison,
		sectionType  = "subsubsection",
		fontSizeRow  = 2,
		@name        = "heatmap" + std.quote(ID, type="Anduril"),
		@enabled     = runHeatmap
	)

	//--- GO ENRICHMENT -------------------------------------------------------------------------------//

	goEnrichment = getGOEnrichmentReport
	(
		geneIds      = degCalledLst[ID],
		deseq        = degAllLst[ID],    // used to correct background gene set using only actually measured genes
		geneNames    = geneNames,
		geneGO       = geneGO,
		threshold    = pGOEnrich,
		ID           = ID,
		sectionTitle = "GO terms enriched in DEGs between " + comparison.caseG + " and " + comparison.controlG,
		sectionType  = "subsubsection",
		@name        = "goEnrichment" + std.quote(ID, type="Anduril"),
		@enabled     = runGO
	)

	//--- KEGG PATHWAYS -------------------------------------------------------------------------------//

	include "/mnt/projects/fikret/anduril/includes/keggReport.and"
	kegg = keggReport
	(
		degsCalled   = degCalledLst[ID],
		degsAll      = degAllLst[ID],
		geneNames    = geneNames,
		ID           = ID,
		sectionTitle = "KEGG pathways enriched between " + comparison.caseG + " and " + comparison.controlG,
		sectionType  = "subsubsection",
		comparison   = comparison,
		topNdiagrams = 10,
		fdrCutoff    = 0.01,
		@name        = "kegg" + std.quote(ID, type="Anduril"),
		@enabled     = runKegg
	)

	//--- GENE INTERACTION NETWORK --------------------------------------------------------------------//
	
	statusTable = TableQuery
	(
		table1   = degCalledLst[ID] @require,
		table2   = degAllLst[ID] @require,
		columnTypes = deseqColumnTypes,
		query    = '''
			SELECT "ids" AS "Ensembl", "status" FROM table1
			UNION
			SELECT T2."ids" AS "Ensembl", 1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" >= 1
			UNION
			SELECT T2."ids" AS "Ensembl", -1 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 10 AND T2."q'''+ID+'''" < 0.01 AND T2."fc'''+ID+'''" <= -1
			UNION
			SELECT T2."ids" AS "Ensembl", 0 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" >= 300 AND T2."q'''+ID+'''" >= 0.9 AND T2."fc'''+ID+'''" > -0.1 AND T2."fc'''+ID+'''" < 0.1
			UNION
			SELECT T2."ids" AS "Ensembl", -2 AS "status"
			FROM   table2 T2 LEFT JOIN table1 T1 ON T2."ids" = T1."ids" 
			WHERE  T1."ids" IS NULL AND T2."meanExpr'''+ID+'''" < 10
            ''',
		@name    = "statusTable_" + std.quote(ID, type="Anduril"),
		@enabled = runNetwork
	)
	
    network = InteractionNetwork
    (
    	force genes  = degCalledLst[ID],
		force status = statusTable,
		moksiskaan   = moksiskaanInit.connection,
		ensembl      = ensemblDb,
		organism     = Organism_Homo_sapiens,
		title        = "Interaction network of DEGs between " + comparison.caseG + " and " + comparison.controlG,
		linkTypes    = std.concat(sep=",",
			//LinkType_pathway_precedence,
			//LinkType_protein_protein_interaction,
			LinkType_chemical_reaction,
			LinkType_protein_activation,
			LinkType_protein_inhibition,
			LinkType_protein_state_change,
			LinkType_protein_binding,
			LinkType_protein_dissociation,
			LinkType_gene_expression,
			LinkType_gene_repression,
			LinkType_phosphorylation,
			LinkType_dephosphorylation,
			LinkType_glycosylation,
			LinkType_ubiquitination,
			LinkType_deubiquitination,
			LinkType_methylation,
			LinkType_demethylation,
			LinkType_acetylation,
			LinkType_deacetylation,
			LinkType_sumoylation,
			LinkType_desumoylation
		),
		annotRules        = "",
		bioentityTypes    = BioentityType_gene,
		maxGap            = 1,
		cytoscape         = false,
		useStudies        = "",
		hideGaps          = false,
		isolateGroupNames = false,
		expand            = "connected",
		statusFilter      = "NA",
		sectionType       = "subsubsection",
		@name             = "network_" + std.quote(ID, type="Anduril"),
		@enabled          = runNetwork
	)
	
	//--- COMBINE REPORTS -----------------------------------------------------------------------------//

	degReportLst[ID] = LatexCombiner
	(
		array = {
			degVolcanoPlot.document,
			degVolcanoPlotMito.document,
			degTableUp, 
			degBoxplotUp,
			degTableDn, 
			degBoxplotDn, 
			exprHeatmap, 
			goEnrichment,
			kegg,
			network.report
		},
		sectionTitle = std.quote(ID, type="Latex"), 
		sectionType = "subsection"
	)
}

//------------------------------------------------------------------------------------------------
//--- VENN DIAGRAM(S)
//------------------------------------------------------------------------------------------------

degSets = CSV2SetList(tables=degCalledLst)

venn = VennDiagram
(
	sets         = degSets,
	cexSetName   = 0.3,
	cexSetSize   = 0.3,
	doWeights    = true,
	sets1        = "DTC_vs_MNC,DTC_vs_TUM,TUM_vs_MNC",
	sectionTitle = "Gene set comparisons",
	sectionType  = "subsection",
	types        = "circles",
	@enabled     = runVenn
)

degReportLst["venn"] = venn.report

//------------------------------------------------------------------------------------------------
//--- VENN SETS
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/venn.and"

vennSetsExpanded = ExpandCollapse(relation=venn.sets)

// --- DTC_vs_MNC and NOT TUM_vs_MNC

vennSetTableReport_DTC_vs_MNC_AND_NOT_TUM_vs_MNC = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"DTC_vs_MNC_AND_DTC_vs_TUM_AND_NOT_TUM_vs_MNC", "DTC_vs_MNC_AND_NOT_DTC_vs_TUM_AND_NOT_TUM_vs_MNC"},
	outputComparisons  = {"DTC_vs_MNC", "TUM_vs_MNC"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	orderBy            = "DTC_vs_MNC",
	section            = "Intersection DTC vs. MNC and NOT TUM vs. MNC",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed comparing " + comparisons["DTC_vs_MNC"].desc + " (set 'A') but NOT comparing " + comparisons["TUM_vs_MNC"].desc + " (set 'B'). " +
	                     "Thus, these genes have potential DTC-specific functions. Genes sorted by column 'FC(A)' from largest to smallest.",
	@enabled           = runVenn
)
degReportLst["vennSetTableReport_DTC_vs_MNC_AND_NOT_TUM_vs_MNC"] = vennSetTableReport_DTC_vs_MNC_AND_NOT_TUM_vs_MNC.report

// --- intersection DTC_vs_MNC and DTC_vs_TUM

vennSetTableReport_DTC_vs_MNC_AND_DTC_vs_TUM = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC", "DTC_vs_MNC_AND_DTC_vs_TUM_AND_NOT_TUM_vs_MNC"},
	outputComparisons  = {"DTC_vs_MNC", "DTC_vs_TUM"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection DTC vs. MNC and DTC vs. TUM",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in both " + comparisons["DTC_vs_MNC"].desc + " (set 'A') and " + comparisons["DTC_vs_TUM"].desc + " (set 'B'). " +
	                     "Genes sorted by average FC from largest to smallest.",
	@enabled           = runVenn
)
degReportLst["vennSetTableReport_DTC_vs_MNC_AND_DTC_vs_TUM"] = vennSetTableReport_DTC_vs_MNC_AND_DTC_vs_TUM.report

// --- intersection DTC_vs_MNC and TUM_vs_MNC

vennSetTableReport_DTC_vs_MNC_AND_TUM_vs_MNC = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC", "DTC_vs_MNC_AND_NOT_DTC_vs_TUM_AND_TUM_vs_MNC"},
	outputComparisons  = {"DTC_vs_MNC", "TUM_vs_MNC"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection DTC. vs. MNC and TUM vs. MNC",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in both " + comparisons["DTC_vs_MNC"].desc + " (set 'A') and " + comparisons["TUM_vs_MNC"].desc + " (set 'B'). " +
	                     "Genes sorted by average FC from largest to smallest.",
	@enabled           = runVenn
)
degReportLst["vennSetTableReport_DTC_vs_MNC_AND_TUM_vs_MNC"] = vennSetTableReport_DTC_vs_MNC_AND_TUM_vs_MNC.report

// --- intersection DTC_vs_TUM and TUM_vs_MNC

vennSetTableReport_DTC_vs_TUM_AND_TUM_vs_MNC = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC", "NOT_DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC"},
	outputComparisons  = {"DTC_vs_TUM", "TUM_vs_MNC"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection DTC vs. TUM and TUM vs. MNC",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in both " + comparisons["DTC_vs_TUM"].desc + " (set 'A') and " + comparisons["TUM_vs_MNC"].desc + " (set 'B'). " +
	                     "Genes sorted by average FC from largest to smallest.",
	@enabled           = runVenn
)
degReportLst["vennSetTableReport_DTC_vs_TUM_AND_TUM_vs_MNC"] = vennSetTableReport_DTC_vs_TUM_AND_TUM_vs_MNC.report

// --- intersection DTC_vs_MNC, DTC_vs_TUM and TUM_vs_MNC

vennSetTableReport_DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC = VennSetTableReport
(
	vennSetData        = vennSetsExpanded,
	vennSetNames       = {"DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC"},
	outputComparisons  = {"DTC_vs_MNC", "DTC_vs_TUM", "TUM_vs_MNC"},
	degs               = degAllLst,
	geneAnnot          = geneAnnot,
	section            = "Intersection DTC vs. MNC, DTC vs. TUM and TUM vs. MNC",
	sectionType        = "subsubsection",
	caption            = "These genes were found to be significantly differentially expressed in all three comparisons, including " + comparisons["DTC_vs_MNC"].desc + " (set 'A'), " + 
	                     comparisons["DTC_vs_TUM"].desc + " (set 'B'), and " + comparisons["TUM_vs_MNC"].desc + " (set 'C'). " +
	                     "Genes sorted by average FC from largest to smallest.",
	@enabled           = runVenn
)
degReportLst["vennSetTableReport_DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC"] = vennSetTableReport_DTC_vs_MNC_AND_DTC_vs_TUM_AND_TUM_vs_MNC.report

//------------------------------------------------------------------------------------------------
//--- EXPRESSION BOX PLOTS OF SELECTED GENES
//------------------------------------------------------------------------------------------------

boxplotMito = ExpressionBoxPlot
(
	force expr   = deseqExprMatrixDGEA.log2,
	force sampleGroups = sampleGroups,
	includeGroups="TUM,DTC,MNC",
	annotation = geneAnnot,
	hgnc = "MT-TF,MT-RNR1,MT-TV,MT-RNR2,MT-TL1,MT-ND1,MT-TI,MT-TQ,MT-TM,MT-ND2,MT-TW,MT-TA,MT-TN,MT-TC,MT-TY,MT-CO1,MT-TS1,MT-TD,MT-CO2,MT-TK,MT-ATP8,MT-ATP6,MT-CO3,MT-TG,MT-ND3,MT-TR,MT-ND4L,MT-ND4,MT-TH,MT-TS2,MT-TL2,MT-ND5,MT-ND6,MT-TE,MT-CYB,MT-TT,MT-TP",
	nRow = 6,
	nCol = 7,
	height = 10,
	labelOutliers=true,
	cexSampleLabel=0.3,
	cexGroupLabel=0.7,
	caption = 'Expression values of mitochondria-encoded genes.',
	sectionTitle="Mitochondria-encoded genes", 
	sectionType="subsection"
)

boxplotMitoMNA = ExpressionBoxPlot
(
	force expr   = deseqExprMatrixDGEA.log2,
	force sampleGroups = sampleGroups,
	includeGroups="TUMmna,TUMnomna,DTCmna,DTCnomna,MNC",
	annotation = geneAnnot,
	hgnc = "MT-TF,MT-RNR1,MT-TV,MT-RNR2,MT-TL1,MT-ND1,MT-TI,MT-TQ,MT-TM,MT-ND2,MT-TW,MT-TA,MT-TN,MT-TC,MT-TY,MT-CO1,MT-TS1,MT-TD,MT-CO2,MT-TK,MT-ATP8,MT-ATP6,MT-CO3,MT-TG,MT-ND3,MT-TR,MT-ND4L,MT-ND4,MT-TH,MT-TS2,MT-TL2,MT-ND5,MT-ND6,MT-TE,MT-CYB,MT-TT,MT-TP",
	nRow = 6,
	nCol = 7,
	height = 10,
	labelOutliers=true,
	cexSampleLabel=0.3,
	cexGroupLabel=0.7,
	caption = 'Expression values of mitochondria-encoded genes stratified by MNA status.',
	sectionTitle="Mitochondria-encoded genes stratified by MNA status", 
	sectionType="subsection"
)

boxplotMage = ExpressionBoxPlot
(
	force expr   = deseqExprMatrixDGEA.log2,
	force sampleGroups = sampleGroups,
	includeGroups="TUMmna,TUMnomna,DTCdxmna,DTCdxnomna,DTCrelmna,DTCrelnomna,MNC",
	annotation = geneAnnot,
	hgnc = "MAGEA1,MAGEA10,MAGEA11,MAGEA12,MAGEA3,MAGEA4,MAGEA5,MAGEA6,MAGEA8,MAGEB1,MAGEB10,MAGEB16,MAGEB17,MAGEB18,MAGEB2,MAGEB3,MAGEB4,MAGEB6,MAGEC1,MAGEC2,MAGEC3,MAGED1,MAGED2,MAGED4,MAGEE1,MAGEE2,MAGEF1,MAGEH1",
	nRow = 5,
	nCol = 6,
	height = 10,
	labelOutliers=true,
	cexSampleLabel=0.3,
	cexGroupLabel=0.7,
	caption = 'Expression values of MAGE gene family members.',
	sectionTitle="MAGE", 
	sectionType="subsection"
)

boxplotSelectedGenes = LatexCombiner
(
	array        = {boxplotMito.document, boxplotMitoMNA.document, boxplotMage.document}, 
	pagebreak    = true,
	sectionTitle = "Expression values of selected genes", 
	sectionType  = "section"
)

//------------------------------------------------------------------------------------------------
//--- POSITIONAL GENE ENRICHMENT
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/pgeReport.and"

pgeReportLst = record()
for ID, comparison : comparisons 
{ 
	pgeReportLst[ID] = PGEReport
	(
		query=degCalledLst[ID], 
		reference=gtfNorRNA.optOut1, 
		title=ID,
		pvalue=0.01,
		includeHeader=std.length(pgeReportLst)==0,
		@name="pge_" + std.quote(ID, type="Anduril"),
		@enabled = runPGE
	)
}

pgeReport = LatexCombiner
(
	array=pgeReportLst, 
	pagebreak=true, 
	sectionTitle="Positional gene enrichment (PGE) of differentially expressed genes", 
	sectionType="section",
	@enabled = runPGE
)
 
//------------------------------------------------------------------------------------------------
//--- COMBINED MAIN REPORT
//------------------------------------------------------------------------------------------------

degReport = LatexCombiner
(
	array        = degReportLst,
	pagebreak    = true,
	tail         = '\newpage{}',
	sectionTitle = "Differentially expressed genes"
)

combinedReport = LatexCombiner
(
	array={
		experimentReport,
		qcReport.report,
		degReport,
		boxplotSelectedGenes,
		pgeReport,
		rConfig.report
	}
)

combinedPDF = LatexPDF
(
	document = combinedReport,
	header   = docTemplate.header,
	footer   = docTemplate.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-main.pdf"
OUTPUT(combinedPDF.document)

//------------------------------------------------------------------------------------------------
//--- EXCEL FILES WITH DIFFERENTIALLY EXPRESSED GENES
//------------------------------------------------------------------------------------------------

include "/mnt/projects/fikret/anduril/includes/degExcel.and"

degExcel = degExcelOutput
(
	degTables   = degCalledLst,
	degAllLst   = degAllLst,
	linkRule    = ensemblRef,
	geneNames   = geneNames,
	geneAnnot   = geneAnnot,
	comparisons  = comparisons,
	fdrCutoff    = 1
)
	
@out.out.filename = shortName + "-DE-genes.xls"
OUTPUT(degExcel.degs)

@out.out.filename = shortName + "-all-genes.xls"
OUTPUT(degExcel.allGenes)

//------------------------------------------------------------------------------------------------
//--- GENE SET ENRICHMENT ANALYSIS (GSEA)
//------------------------------------------------------------------------------------------------
include "/mnt/projects/fikret/anduril/includes/gsea.and"

// filter comparisons for which GSEA is requested

comparisonsGSEA = record()
for ID, comparison : comparisons 
{
	if (comparison.gsea == "yes") {
		comparisonsGSEA[ID] = comparison
	}
}

// produce RNK files for each comparison

rnks = record()
for ID, comparison : comparisonsGSEA 
{	
	rnks[ID] = DEG2Rnk
	(
		deg = degAllLst[ID],
		annotation = geneNames,
		colP = "p" + ID,
		colFC= "fc" + ID,
		@name = "rnk_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
}

// run GSEA for each comparison and database

enrichedUp = record()
enrichedDn = record()
minSetSize = record()
maxSetSize = record()
permutations = 1000

// MSigDB

category = "MSigDB"	
enrichedUp[category] = record() 
enrichedDn[category] = record() 
minSetSize[category] = 5
maxSetSize[category] = 1000

for ID, comparison : comparisonsGSEA 
{	
	gseaMSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/msigdb5.0/c1.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c2.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c3.mir.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c5.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c6.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/c7.all.v5.0.symbols.gmt," + 
		        "/mnt/projects/generic/data/msigdb5.0/h.all.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/ccri/ccri_custom_gene_sets.gmt," +
		        "/mnt/projects/generic/data/laurenti_2013_hematopoietic_lineages.gmt", 
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaMSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaMSigDB.enrichedUp
	enrichedDn[category][ID] = gseaMSigDB.enrichedDown
}

// GeneSigDB

category = "GeneSigDB"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 5
maxSetSize[category] = 1000

for ID, comparison : comparisonsGSEA 
{	
	gseaGeneSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/GeneSigDB/ALL_SIGSv4.nodup.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaGeneSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaGeneSigDB.enrichedUp
	enrichedDn[category][ID] = gseaGeneSigDB.enrichedDown
}
	
// DSigDB

category = "DSigDB"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 3
maxSetSize[category] = 1000

for ID, comparison : comparisonsGSEA 
{	
	gseaDSigDB = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/generic/data/DSigDB/DSigDB_v1.0_All.nodup.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaDSigDB_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaDSigDB.enrichedUp
	enrichedDn[category][ID] = gseaDSigDB.enrichedDown
}

// TF targets

category = "TFT"	
enrichedUp[category] = record()
enrichedDn[category] = record()
minSetSize[category] = 3
maxSetSize[category] = 5000

for ID, comparison : comparisonsGSEA 
{	
	gseaTFTargets = GSEA
	(
		rnk = rnks[ID],
		annotations = genesetAnnotation,
		label = ID,
		gmt   = "/mnt/projects/iamp/data/anduril/encode_tf_chipseq.ucsc.hg19.gmt," +
		        "/mnt/projects/generic/data/pazar/pazar.gmt," +
		        "/mnt/projects/generic/data/msigdb5.0/c3.tft.v5.0.symbols.gmt," +
		        "/mnt/projects/generic/data/opossum3/jaspar_core.gmt",
		options = "-nperm " + permutations + " -set_max " + maxSetSize[category] + " -set_min " + minSetSize[category],
		@memory  = 7000,
		@cpu     = 2, 			
		@name = "gseaTFTargets_" + std.quote(ID, type="Anduril"),
		@enabled = runGSEA
	)
	enrichedUp[category][ID] = gseaTFTargets.enrichedUp
	enrichedDn[category][ID] = gseaTFTargets.enrichedDown
}

// get GSEA reports (heatmap overview + tables with enriched gene sets) 

gseaReport = GSEAReport
(
	enrichedUp = enrichedUp,
	enrichedDn = enrichedDn,
	minSetSizes = minSetSize,
	maxSetSizes = maxSetSize,
	tableReportComparisons = comparisonsGSEA,
	topNHeatmap = 80,
	topNTable   = 100,
	expression = degAllLst,
	geneNames  = geneNames,
	sigCutoff = 1e-2,
	hsigCutoff = 1e-5,
	overlapSigCutoff = 1e-5,
	overlapHSigCutoff = 1e-7,
	runOverlapReport = true,
	@enabled = runGSEA
)

docTemplateGsea = LatexTemplate
(
	authors  = std.quote(authors, type="LaTeX"),
	bibtex1  = rConfig.citations,
	bibtex2  = bibtexSequencing,
	title    = std.quote(title, type="LaTeX") + " --- GSEA Report",
	printTOC = true
)

combinedPDFGsea = LatexPDF
(
	document = gseaReport,
	header   = docTemplateGsea.header,
	footer   = docTemplateGsea.footer,
	useRefs  = true,
	verbose  = false
)

@out.out.filename = shortName + "-GSEA.pdf"
OUTPUT(combinedPDFGsea.document)
